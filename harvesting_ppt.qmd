---
title: "SCRAPING TENNIS WEBSITES"
subtitle: "Data Harvesting UC3M"
date: 2025/03/27
author: "Irantzu Lamarca, Diego Fernandez"
format:
  revealjs:
    theme: simple
    transition: slide
    transition-speed: fast
    embed-resources: TRUE
    slide-number: c/t
highlight-style: atom-one-dark
editor: visual
logo: https://www.rstudio.com/wp-content/uploads/2018/10/RStudio-Logo-Flat.png
---

## Objectives of the project

- Gather information from the official ATP website (rankings, player statistics...)

- Build a scrapper to extract the data (Selenium)

- Create a csv file and perform some analysis with it (Shiny)

--- 

## Libraries used

```{r, echo=TRUE, eval=TRUE}
library(scrapex)
library(rvest)
library(httr)
library(dplyr)
library(tidyr)
library(stringr)
library(ggplot2)
library(xml2)
library(lubridate)
library(tidyverse)
library(RSelenium)
```

--- 

## Scraping the atp rankings

- Atp_link <- "https://www.atptour.com/es/rankings/singles?rankRange=0-100&region=all&dateWeek=Semana%20Actual&SortField=Ranking&SortAscending=True"
- The website does not let you scrape it unless an user-agent is set
- 1st attempt: atp_tables[[1]] -> did not work

---

![ATP Ranking](images/foto1.jpeg)

---

## 

- 2nd attempt
- top 300 players


```{r, echo=TRUE, eval=FALSE}
xml_find_all(atp_website,"//span[@class='lastName']")

#<!-- //span: Find all <span> elements -->
#<!-- [@class='lastName']: only with the class lastName -->
```


![](images/foto3.jpeg)
---

## Scraping the aces of each player

![](images/foto5.jpeg)

---

Aces table: 

![](images/foto4.jpeg)
---

## Scraping the rest of the variables

- Same process as with the aces table
- After cleaning all the tables, join by ranking number
- Additional 2 variables extracted from another website 

---

## Other scraped variables 

- Wins and looses 
- Points won with first serve
- % of the wins of the player when he has to serve
- % of the wins of the player when he has to receive the serve
- % of break points saved

---

## Age + country

- Age and country of the player from another website -> ATP website was not letting us do it

```{r, echo=TRUE, eval=FALSE}

age_country_link <- "https://tennisabstract.com/reports/atpRankings.html" |>
  read_html()

age_country <- age_country_link |> html_table()

atp_table <- age_country[[1]]
atp_table

# Let´s clean the table:

atp_table <- atp_table[-1, ]
atp_table <- atp_table[-1, ]
atp_table <- atp_table[, 1:4]

colnames(atp_table) <- c("Rank", "Player", "Country", "Birthdate")

# Keep only the first 300 rows
atp_table <- atp_table |> slice(1:300)

# Calculate age from birthdate
atp_table <- atp_table |> 
  mutate(Birthdate = as.Date(Birthdate),
         Age = floor(interval(Birthdate, today()) / years(1)))


# Keep only Rank, Last_Name, and Age
atp_table <- atp_table |>  select(Rank, Player, Age, Country)
atp_table$Rank <- as.numeric(atp_table$Rank)
```

---

Age + country table:

![](images/foto2.jpeg)

---

## Final dataset

```{r, echo=FALSE, eval=TRUE}
library(readr)
library(knitr)
library(kableExtra)

df <- read_csv("sssx2.csv")

kable(df[1:10, ]) %>%
  kable_styling(font_size = 12)

```

---

## Usage of the data

- Remove duplicate or irrelevant columns
- Convert percentages to numeric values
- Handle missing values 
- Convert data into correct format

```{r, echo=TRUE, eval=FALSE}

# Delete “Matches_played” and “Total_points” columns because they have 100% of NA
df <- df %>% select(-Matches_played, -Total_points)

# Merge column data into one column, taking non-NA values
df$matches_played <- coalesce(df$Matches_played.x, df$Matches_played.y, df$Matches_played.x.x, df$Matches_played.y.y)

# Delete original columns
df <- df %>% select(-Matches_played.x, -Matches_played.y, -Matches_played.x.x, -Matches_played.y.y)

# Delete unwanted columns
df <- df %>% select(-Points_won, -total_points, -points_won)

```

---

```{r}
# View number of NA values per column
na_counts <- colSums(is.na(df))
na_counts <- na_counts[na_counts > 0] 


# Display percentage of NA values per column
na_percentage <- (na_counts / nrow(df)) * 100

```


```{r, echo=FALSE, eval=TRUE}
# NA chart to visualize impact
na_data <- data.frame(Variable = names(na_percentage), Porcentaje = na_percentage)
ggplot(na_data, aes(x = reorder(Variable, -Porcentaje), y = Porcentaje)) +
  geom_bar(stat="identity", fill="red") +
  coord_flip() +
  ggtitle("Percentage of NA Values per Variable") +
  xlab("Variable") +
  ylab("Percentage of NA Values")
```

---

## Shiny app 1

- ATP Player Comparator
- Select a professional tennis player and compare their performance metrics with custom input values
- Purpose: provide players, coaches, and analysts with a way to compare their performance to elite players, helping to identify strengths and areas for improvement

---

![](images/shiny1.png)
---

![](images/shiny6.png)
---

![](images/shiny2.png)

---

![](images/shiny3.png)

---

![](images/shiny4.png)

---

![](images/shiny5.png)

---

## Shiny app 2

- Tennis match simulator
- Two simulation modes: 
     - Monte Carlo simulation (predicts match outcomes over 1,000 iterations) 
     - Set-based simulation that determines the winner set by set
- Valuable tool for fans, analysts, and players who want to assess potential matchups and performance factors

---

![](images/app1.png)

---

![](images/app2.png)

---

![](images/app3.png)

---

![](images/app4.png)

---

![](images/app5.png)

---